{"version":3,"sources":["components/Calculator/Calculator.js","components/Calculator/Screen/ResultScreen/ResultScreen.js","components/Calculator/Screen/ComputationScreen/ComputationScreen.js","components/Calculator/Screen/Screen.js","components/Calculator/Keypad/KeypadRow/KeypadRow.js","components/Button/Button.js","components/Calculator/Keypad/Keypad.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","equation","result","onButtonPress","event","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","error","alert","trim","substr","length","this","className","React","Component","ResultScreen","props","children","ComputationScreen","Screen","KeypadRow","Button","classes","type","push","console","log","join","onClick","Keypad","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8da7b098.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Screen from \"./Screen/Screen\";\r\nimport Keypad from \"./Keypad/Keypad\";\r\n\r\nclass Calculator extends React.Component {\r\n  state = {\r\n    equation: \"\",\r\n    result: 0,\r\n  };\r\n\r\n  onButtonPress = (event) => {\r\n    let equation = this.state.equation;\r\n    const pressedButton = event.target.innerHTML;\r\n\r\n    if (pressedButton === \"C\")\r\n        return this.clear();\r\n    else if (\r\n      (pressedButton >= \"0\" && pressedButton <= \"9\") ||\r\n      pressedButton === \".\"\r\n    )\r\n      equation += pressedButton;\r\n    else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(pressedButton) !== -1)\r\n      equation += \" \" + pressedButton + \" \";\r\n    else if (pressedButton === \"=\") {\r\n      try {\r\n        const evalResult = eval(equation);\r\n        const result = Number.isInteger(evalResult)\r\n          ? evalResult\r\n          : evalResult.toFixed(2);\r\n        this.setState({ result });\r\n      } catch (error) {\r\n        alert(\"Invalid Mathematical Equation\");\r\n      }\r\n    } else {\r\n      equation = equation.trim();\r\n      equation = equation.substr(0, equation.length - 1);\r\n    }\r\n    this.setState({\r\n        equation: equation\r\n    });\r\n  };\r\n\r\n  clear() {\r\n      this.setState({\r\n          equation: \"\",\r\n          result: 0\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"calculator\">\r\n        <Screen equation={this.state.equation} result={this.state.result} />\r\n        <Keypad onButtonPress={this.onButtonPress} />\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react'\r\n\r\nfunction ResultScreen(props) {\r\n    return (\r\n        <div className=\"result-screen\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultScreen\r\n","import React from 'react'\r\n\r\nfunction ComputationScreen(props) {\r\n    return (\r\n        <div className=\"computation-screen\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ComputationScreen\r\n","import React from 'react'\r\nimport ResultScreen from './ResultScreen/ResultScreen'\r\nimport ComputationScreen from './ComputationScreen/ComputationScreen'\r\n\r\nfunction Screen(props) {\r\n    return (\r\n        <section className=\"screen\">\r\n            <ResultScreen>{props.result}</ResultScreen>\r\n            <ComputationScreen>{props.equation}</ComputationScreen>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Screen\r\n","import React from 'react'\r\n\r\nfunction KeypadRow(props) {\r\n    return (\r\n        <div className=\"keypad-row\">\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KeypadRow\r\n","import React from 'react'\r\n\r\nfunction Button(props) {\r\n\r\n    const classes = ['btn'];\r\n\r\n    if(typeof props !== \"undefined\" && typeof props.type !== \"undefined\")\r\n        classes.push(\"btn--\" + props.type);\r\n        console.log(props.type);\r\n\r\n    return (\r\n        <button className={classes.join(\" \")} onClick={props.onButtonPress}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from \"react\";\r\nimport KeypadRow from \"./KeypadRow/KeypadRow\";\r\nimport Button from \"../../Button/Button\";\r\n\r\nfunction Keypad(props) {\r\n  return (\r\n    <section className=\"keypad\">\r\n      <KeypadRow>\r\n        <Button type=\"primary\" onButtonPress={props.onButtonPress}>C</Button>\r\n        <Button type=\"primary\" onButtonPress={props.onButtonPress}>&larr;</Button>\r\n        <Button type=\"operator\" onButtonPress={props.onButtonPress}>%</Button>\r\n        <Button type=\"operator\" onButtonPress={props.onButtonPress}>/</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>9</Button>\r\n        <Button onButtonPress={props.onButtonPress}>8</Button>\r\n        <Button onButtonPress={props.onButtonPress}>7</Button>\r\n        <Button type=\"operator\" onButtonPress={props.onButtonPress}>*</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>6</Button>\r\n        <Button onButtonPress={props.onButtonPress}>5</Button>\r\n        <Button onButtonPress={props.onButtonPress}>4</Button>\r\n        <Button type=\"operator\" onButtonPress={props.onButtonPress}>-</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>3</Button>\r\n        <Button onButtonPress={props.onButtonPress}>2</Button>\r\n        <Button onButtonPress={props.onButtonPress}>1</Button>\r\n        <Button type=\"operator\" onButtonPress={props.onButtonPress}>+</Button>\r\n      </KeypadRow>\r\n\r\n      <KeypadRow>\r\n        <Button onButtonPress={props.onButtonPress}>0</Button>\r\n        <Button onButtonPress={props.onButtonPress}>.</Button>\r\n        <Button onButtonPress={props.onButtonPress} type=\"large\">=</Button>\r\n        \r\n      </KeypadRow>      \r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Keypad;\r\n","import React from 'react';\nimport \"./styles/styles.css\";\nimport Calculator from './components/Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Calculator />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}